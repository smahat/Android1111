Gradle Tutorial:
Objective: 

Learn the basic syntax in build.gradle file generated by Android Studio.
Learn about gradle tasks, build types, product flavors, build variants and how to add additional info such as the date to the APK file name.

Understand what a Gradle is: use Gradle to super charge your builds... Build your android apps from command line.
Read through a Gradle Build file.
Create your own Gradle plugin.
Create build flavors for profit.

Gradle -> easy to use, it contains advanced options.  takes Java or Kotlin code, XML layouts and the latest Android build tools to create app package files.. known as Android Package Kit. (APK) file.
 
Customize your configurations to have development/production versions of the app that behave differently. Add dependencies for third party libraries.

Gradle -> an open source build automation system. Brings convienience of Groovy based DSL and Ant and Maven.
USe: manipulate the build process and its logic to create multipke versions of your app.
Much easier to use and lot more concise and flexible than Ant or MAven.
Android Gradle plugin introduces as build tool built in Android Studio.
-------------------
Download SocialixifyStarter: starter project for this tutorial. setup the Gradle Wrapper.
Automatically download the latest supported Gradle version.
Wrapper?

After updates:
------------------------------------------
Green Gradle icon and .gradle extension. --> automatic creation by Android Studio. 
These files generated by Android Studio during project creation. responsible for processing your project's build.  have necessary infor about project structure, library dependencies, library versions and app versions we will get as a result of build process.
---------------------------------------------

Project-level build.gradle:
In the root directory of the project find build.gradle file. top-level build.gradle file.
 Settings which are applied to all modules of the project.
build.gradle in Gradle Scripts at two levels: Module level and project level.  
Most of the time.. we will edit module level file.
 The file says:
Apply plugin: 'com.android.application' -> applies the Android plugin at the parent level. makes available the top-level build tasks required to build an Android app.

Another plugins 'kotlin-android' and 'kotlin-android-extensions':
Kotlin compiler and Android specific Kotlin extensions. 

Android{compileSdkVersion.. defaultConfig{}, buildTypes{}..} 
-->gives you configuration options as targetSdkVersion, TargetSDK configure at the latest API level.

minSDKVersion --> minimum SDK version. minimym supported version.

Dependencies{..} ->Important dependencies like: 
 implementation : ' ..support:appcompat-v7:VERSION'
and implementation: '..:design:VERSION' provides support and compatibility of new features from latest API to older APIs.

Implementation: 'org..:$kotlin_version':
 allows your code to use Kotlin standar library.

Project level build gradle:
Find build.gradle file in root directory. top level build.gradle file.
It has settings applied to all modules of the project.

buildscript{
  repositories{
       google()
       jcenter()
  }
dependencies {
           classpath ' com.android..build:gradle: 3.0.0'
           classpath 'org.jetbrains.kotlin.. plugin ' 
} 
allprojects{
  repositories{
  google()
 jcenter()
}

buildscript -> settings needed to perform your project building.

repositories -> add names of the repositories that Gradle should search for libraries you use.

dependencies -> contains necessary plugin dependencies. Gradle and Kotlin plugins. Don't put module dependencies in this block.

structure of allprojects block is similar to buildscript block. Here, you define repositories for all of your modules not for Gradle itself. 

Usually you don't define the dependencies section for allprojects. 

as dependencies for each module are different.. they should reside in the module-level build.gradle.
-----------------------------------------------------------------------

Module level build.gradle:

build.gradle file in app module directory. It contains dependencies (libraries whicha module relies on) and instructions for the build process. Each module defines its build.gradle file.

apply plugin: '....'
android{
             
             }
          }
dependencies{
        implementation fileTree(dir: 'libs', include: ['*.jar'])
}
1) apply plugin: list of plugins needed to build the module. 
like:
 Android-specific settings of the build process.
use: com.android.library.
kotlin-android and kotlin-android-extensions plugins allow you to use Kotlin language and Kotlin android extensions in your module.

2) android block -> place all platform specific options of the module.

3) compileSdkVersion -> Api level your app will be compiled with. can not use features from an API higher than this value. 

4) buildToolsVersion -> version of compiler. if not specified will use most recent downloaded version of the Build Tools.

5) defaultConfig -> contains options which will be applied to all build versions of your app by default.

6) applicationId -> identifier of your app. unique to publish online!

7) to set the lowest API level supported -> minSdkVersion. 

------------------

Core Components:
